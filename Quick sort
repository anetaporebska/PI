
#include <stdio.h>
#include <stdlib.h>

void swap(int *a, int *b);
void quickSort(int arr[], int left, int right);
int partition(int arr[], int left, int right);


int main()
{
    int z=0;
    scanf("%d",&z);
    
    int *N;         //tablica z wartościami n, przechwowuje długości każego
    N=(int*)malloc(sizeof(N)*z);
    
    int idx=0;
    int d=0;
    int *arr=NULL;
    for(int j=0; j<z; j+=1){
        
        int n=0;
        scanf("%d",&n); 
        N[j]=n;
        d+=n;
        arr=(int*)realloc(arr,sizeof(arr)*d);
        for(int i=0; i<n; i+=1){
            scanf("%d",&arr[idx]);
            idx+=1;
        }
        
        
    }
    
    
    int prev=0;
    for(int i=0; i<z; i+=1){
        int n=N[i];
        quickSort(arr,prev,prev+n-1);
        
        for(int j=prev; j<prev+n; j+=1){
            printf("%d \n",arr[j]);
        }
        prev=prev+n;
    }
    
    
    free(arr);
    free(N);
    
    return 0;
}

void swap(int *a, int *b){
    int h=*a;
    *a=*b;
    *b=h;
}


void quickSort(int arr[], int left, int right){
    if (left<right){
        int pi=partition(arr,left,right);
        quickSort(arr,left,pi-1);
        quickSort(arr,pi+1,right);
    }
}

int partition(int arr[], int left, int right){
    int pivot=arr[right];
    int i=left-1;
    
    for(int j=left; j<= right-1; j+=1){
        if (arr[j]<pivot){
            i+=1;
            swap(&arr[i],&arr[j]);
        }
    }
    swap(&arr[i+1],&arr[right]);
    return i+1;
}
